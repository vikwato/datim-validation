% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/d2Parser.R
\name{d2Parser}
\alias{d2Parser}
\title{General purpose parsing function for different formats of DHIS2 data}
\usage{
d2Parser(filename, type, organisationUnit = NA,
  dataElementIdScheme = "id", orgUnitIdScheme = "id",
  idScheme = "id", invalidData = FALSE, csv_header = TRUE)
}
\arguments{
\item{filename}{Location of the payload to be imported. Should be a valid DHIS2 import file}

\item{type}{Type of the file. Should be either xml, json or csv}

\item{organisationUnit}{Organisation unit UID of the operating unit. If left blank, assumed to be global.}

\item{dataElementIdScheme}{Should be one of either code, name, shortName or id. If this paramater is "id",
then the Data elements are assumed to be already specififed as UIDs.}

\item{orgUnitIdScheme}{Should be one of either code, name, shortName or id. If this paramater is "id",
then the organisation units are assumed to be already specififed as UIDs}

\item{idScheme}{Remapping scheme for category option combos}

\item{invalidData}{Exclude any (NA or missing) data from the parsed file?}

\item{csv_header}{By default, CSV files are assumed to have a header, otherwise FALSE will allow for 
files without a CSV header.}
}
\value{
Returns a data frame of at least "dataElement","period","orgUnit","categoryOptionCombo","attributeOptionCombo","value"
}
\description{
d2Parser will parse a compliant DHIS2 XML,JSON or CSV file and transform it into a standard data
frame which can be used in subsequent DATIM validation routines
}
\note{
function(filename="/home/me/foo.xml",type="xml",dataElementIdScheme="code",orgUnitIdScheme="code",idScheme="id")
Note that all values will be returned as characters.
}
\examples{
\dontrun{
    d<-d2Parser("myfile.csv",type="csv",header=TRUE)
    d<-d2Parser("myfile.json",type="json",dataElementIdScheme="code")
    d<-d2Parser("myfile.xml",type="xml",dataElementIdScheme="name")
}

}
